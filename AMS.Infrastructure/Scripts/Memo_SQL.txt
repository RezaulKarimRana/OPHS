CREATE TYPE [dbo].[ApproversDT] AS TABLE(
	UserId			INT,
	PriorityId		INT,
	StatusId		NVARCHAR(256),
	Remarks			NVARCHAR(256),
	RolePriorityId	INT,
	Created_By		INT
)
GO
IF OBJECT_ID('[dbo].[sp_load_all_Memo_Summary]')IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_load_all_Memo_Summary]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_load_all_Memo_Summary]
@userId INT
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @Pending INT = 0, @RollBack INT = 0, @Completed INT = 0, @Rejected INT = 0, @All INT = 0;
	
	SELECT @Pending = COUNT (DISTINCT S.Id) FROM EstimateMemo S WHERE S.Created_By = @userId AND S.Status = 2
	SELECT @RollBack = COUNT (DISTINCT S.Id) FROM EstimateMemo S WHERE S.Created_By = @userId AND S.Status = -404
	SELECT @Completed = COUNT (DISTINCT S.Id) FROM EstimateMemo S WHERE S.Created_By = @userId AND S.Status = 100
	SELECT @Rejected = COUNT (DISTINCT S.Id) FROM EstimateMemo S WHERE S.Created_By = @userId AND S.Status = -500
	SELECT @All = COUNT (DISTINCT S.Id) FROM EstimateMemo S WHERE S.Created_By = @userId
	SELECT @Pending Pending, @RollBack CR, @Completed Completed, @Rejected Rejected, @All Total
END
GO
IF OBJECT_ID('[dbo].[sp_load_all_Memo]')IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_load_all_Memo]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_load_all_Memo]
    @user_Id int =0,
    @status int,
	@start int =0,
	@rowsperpage int =10
AS
BEGIN

    SET NOCOUNT ON;

	DECLARE @TotalRow INT = 0;

	select @TotalRow = COUNT(distinct m.Id)
    from EstimateMemo m
             join MemoApprover ma on ma.EstimateMemoId = m.Id
    where (ma.User_Id = @user_Id or m.Created_By = @user_Id)
      and (ISNULL(@status,0) = 0 OR m.Status = @status)

    Select distinct
		memo.ID as Id,
		estRefer.Id as EstimateReferenceId,
		estType.Name as EstimateType,
		est.[UniqueIdentifier] as EstimationIdentity,
		est.Subject,
		est.TotalPrice BudgetPrice,
		estRefer.AllowableBudget as AllowableBudget,
		estRefer.AlreadySettle as TotalCost,
		(estRefer.AlreadySettle - estRefer.AllowableBudget) as TotalDeviation

	from EstimateMemo memo
	inner join EstimationReference estRefer on memo.EstimateReferenceId = estRefer.Id
	inner join Estimation est on est.Id = estRefer.EstimationId
	inner join EstimateType estType on est.EstimateType_Id = estType.ID
	left join MemoApprover mmApp on memo.Id = mmApp.EstimateMemoId 
	left join [User] u on u.Id = mmApp.User_Id
	left join [User] us on us.Id = memo.Created_By

	where memo.Created_By = @user_Id
	and (ISNULL(@status,0) = 0 OR memo.Status = @status)

	ORDER BY memo.ID DESC
	OFFSET @start ROWS
	FETCH NEXT @rowsperpage ROWS ONLY
END
GO
IF OBJECT_ID('[dbo].[sp_get_Comma_separate_email_info_by_memo_id]')IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_get_Comma_separate_email_info_by_memo_id]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_get_Comma_separate_email_info_by_memo_id]
	@memoId INT
AS
BEGIN
	select stuff((
                 select ',' + u.Email_Address
                 from [User] u
                 where u.Id in (
                     select User_Id
                     from MemoApprover ma
                     where ma.Priority =
                           (
                               select top 1 Priority
                               from MemoApprover
                               where Status = 2
                                 and MemoApprover.EstimateMemoId = @memoId
                               order by Priority desc
                           )
                       and (ma.Status = 2 and EstimateMemoId = @memoId)
                 )
                 order by u.Id
                 for xml path('')
             ), 1, 1, '') as NextApprover,



       stuff((
                 select ',' + u.Email_Address
                 from [User] u
                 where u.Id in (
                     select User_Id
                     from MemoApprover ma


                     where ma.EstimateMemoId = @memoId
                     and ma.User_Id not in (
                         select User_Id
                     from MemoApprover ma


                     where ma.Priority =
                           (
                               select top 1 Priority
                               from MemoApprover
                               where Status = 2
                                 and MemoApprover.EstimateMemoId = @memoId
                               order by Priority desc
                           )
                       and (ma.Status = 2 and EstimateMemoId = @memoId)
                         )
					 AND ma.User_Id != 532 AND ma.User_Id != 515
					 -- Bashir Hasan and Sheikh Pannu is not want to get email
                 )
                 order by u.Id
                 for xml path('')
             ), 1, 1, '') as AllApproverExceptNextApprover,
       stuff((
                 select ',' + u.Email_Address
                 from [User] u
                 where u.Id in (
                     select User_Id
                     from MemoApprover ma
                     where ma.EstimateMemoId = @memoId
					 AND ma.User_Id != 532 AND ma.User_Id != 515
					 -- Bashir Hasan and Sheikh Pannu is not want to get email
                 )
                 order by u.Id
                 for xml path('')
             ), 1, 1, '') as AllApproverMail,

	       (select u.Email_Address from EstimateMemo m join [User] u on u.id = m.Created_By where m.Id = @memoId) as creatorEmailAddress
END
GO
IF OBJECT_ID('[dbo].[sp_load_all_Memo_Summary_for_approver]')IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_load_all_Memo_Summary_for_approver]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_load_all_Memo_Summary_for_approver]
@userId INT
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @Pending INT = 0, @RollBack INT = 0, @Completed INT = 0, @Rejected INT = 0, @All INT = 0;
	
	SELECT @Pending = COUNT (DISTINCT S.Id) FROM MemoApprover S WHERE S.User_Id = @userId AND S.Status = 2
	SELECT @RollBack = COUNT (DISTINCT S.Id) FROM MemoApprover S WHERE S.User_Id = @userId AND S.Status = -404
	SELECT @Completed = COUNT (DISTINCT S.Id) FROM MemoApprover S WHERE S.User_Id = @userId AND S.Status = 100
	SELECT @Rejected = COUNT (DISTINCT S.Id) FROM MemoApprover S WHERE S.User_Id = @userId AND S.Status = -500
	SELECT @All = COUNT (DISTINCT S.Id) FROM MemoApprover S WHERE S.User_Id = @userId
	
	SELECT @Pending Pending, @RollBack CR, @Completed Completed, @Rejected Rejected, @All Total
END
GO
IF OBJECT_ID('[dbo].[sp_memo_status_update]')IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_memo_status_update]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_memo_status_update]
	@status					NVARCHAR(256),
	@remarks				NVARCHAR(256),
	@id						INT,
	@updated_by				INT,
	@isFinalApproved		BIT
AS
BEGIN
	UPDATE [MemoApprover]
		SET 
			[Status] = @status, 
			Remarks = @remarks,
			[Updated_By] = @updated_by, 
			[Updated_Date] = GETDATE()
		WHERE [User_Id] = @updated_by AND EstimateMemoId = @id


	DECLARE @approveCount INT = 0, @totalRow INT = 0;

	SELECT @approveCount = COUNT(ID) FROM MemoApprover WHERE EstimateMemoId = @id AND Status = 100
	SELECT @totalRow = COUNT(ID) FROM MemoApprover WHERE EstimateMemoId = @id

	IF (@status = -404 OR @status = -500 OR @approveCount = @totalRow OR (@updated_by = 20 AND @isFinalApproved = 1))
	UPDATE EstimateMemo SET Status = @status WHERE Id = @id

	INSERT INTO [dbo].[MemoApproverFeedback]
           ([MemoApproverId]
           ,[EstimateMemoId]
           ,[FeedbackRemarks]
           ,[Status]
           ,[Division_Id]
           ,[Created_By]
           ,[Created_Date]
           ,[Updated_By]
           ,[Updated_Date]
           ,[Is_Deleted])
     VALUES
           (
		   @updated_by
           ,@id
           ,@remarks
           ,@Status
           ,0
           ,@updated_by
           ,GETDATE()
           ,@updated_by
           ,GETDATE()
           ,0
		   )
END
GO
IF OBJECT_ID('[dbo].[sp_load_all_Memo_for_approver]')IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_load_all_Memo_for_approver]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_load_all_Memo_for_approver]
    @user_Id int =0,
    @status int,
	@start int =0,
	@rowsperpage int =10
AS
BEGIN

    SET NOCOUNT ON;

	DECLARE @TotalRow INT = 0;

	select @TotalRow = COUNT(distinct m.Id)
    from MemoApprover m
    where m.User_Id = @user_Id
      and (ISNULL(@status,0) = 0 OR m.Status = @status)

    Select distinct
		memo.ID as Id,
		estRefer.Id as EstimateReferenceId,
		estType.Name as EstimateType,
		est.[UniqueIdentifier] as EstimationIdentity,
		est.Subject,
		est.TotalPrice BudgetPrice,
		estRefer.AllowableBudget as AllowableBudget,
		estRefer.AlreadySettle as TotalCost,
		(estRefer.AlreadySettle - estRefer.AllowableBudget) as TotalDeviation

	from EstimateMemo memo
	inner join EstimationReference estRefer on memo.EstimateReferenceId = estRefer.Id
	inner join Estimation est on est.Id = estRefer.EstimationId
	inner join EstimateType estType on est.EstimateType_Id = estType.ID
	left join MemoApprover mmApp on memo.Id = mmApp.EstimateMemoId 
	left join [User] u on u.Id = mmApp.User_Id
	left join [User] us on us.Id = memo.Created_By

	where mmApp.User_Id = @user_Id
	and (ISNULL(@status,0) = 0 OR mmApp.Status = @status)
	and (ISNULL(@status,0) = 0 OR memo.Status = @status)

	ORDER BY memo.ID DESC
	OFFSET @start ROWS
	FETCH NEXT @rowsperpage ROWS ONLY
END
GO

IF OBJECT_ID('[dbo].[sp_create_estimate_memo_approver]') IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_create_estimate_memo_approver]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_create_estimate_memo_approver]
	@EstimateMemo_Id		INT,
	@User_Id				INT,
	@Priority				INT,
	@Status					NVARCHAR(256),
	@Remarks				NVARCHAR(256),
	@RolePriority_Id		INT,
	@Created_By				INT,
	@PlanDate				datetime
AS
BEGIN

	DELETE MemoApprover WHERE EstimateMemoId = @EstimateMemo_Id
	INSERT INTO MemoApprover
	    (
		EstimateMemoId,
		[User_Id],
		[Priority],
		[Status],
		[Remarks],
		[RolePriority_Id],
		[Created_By],
		[Created_Date],
		[Updated_By],
		[Updated_Date],
		Is_Deleted,
		PlanDate
	    )
   VALUES
	    (
		@EstimateMemo_Id,
		@User_Id,
		@Priority,
		@Status,
		@Remarks,
		@RolePriority_Id,
		@Created_By,
		GETDATE(),
		@Created_By,
		GETDATE(),
		0,
		CONVERT(date, @PlanDate, 101)
	    )
   SELECT
		SCOPE_IDENTITY() AS [Id]
END
GO
IF OBJECT_ID('[dbo].[sp_create_estimation_memo]')IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_create_estimation_memo]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_create_estimation_memo]
	@EstimateReferenceId		INT,
	@EstimateId					INT,
	@TotalDeviation				float,
	@Justification				NVARCHAR(MAX),
	@Created_By					INT,
	@itemlist dbo.ApproversDT	READONLY
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @P_Key INT,@RequestNo VARCHAR(50),@UniqueIdentifier VARCHAR(50),@estimationCount INT;
	SELECT @estimationCount = COUNT(Id) + 1 FROM Settlement WHERE EstimationId = @EstimateId
	SELECT @UniqueIdentifier = UniqueIdentifier FROM Estimation WHERE ID = @EstimateId
	SET @RequestNo = @UniqueIdentifier+'['+CAST(@estimationCount AS VARCHAR(20))+']';

	IF NOT EXISTS (SELECT * FROM EstimateMemo WHERE EstimateReferenceId = @EstimateReferenceId AND EstimateId = @EstimateId)
	BEGIN
		INSERT INTO [dbo].[EstimateMemo]
			   ([RequestNo]
			   ,[EstimateReferenceId]
			   ,[EstimateId]
			   ,[Status]
			   ,[TotalDeviation]
			   ,[Justification]
			   ,[Created_By]
			   ,[Created_Date]
			   ,[Updated_By]
			   ,[Updated_Date]
			   ,[Is_Deleted])
		 VALUES
			   (@RequestNo
			   ,@EstimateReferenceId
			   ,@EstimateId
			   ,2
			   ,@TotalDeviation
			   ,@Justification
			   ,@Created_By
			   ,GETDATE()
			   ,@Created_By
			   ,GETDATE()
			   ,0
			   )
		SET @P_Key = SCOPE_IDENTITY();
	END
	ELSE
	BEGIN
		UPDATE EstimateMemo SET Justification = @Justification, Status = 2, Updated_By = @Created_By, Updated_Date = GETDATE(), TotalDeviation = @TotalDeviation
		WHERE EstimateReferenceId = @EstimateReferenceId AND EstimateId = @EstimateId
		SET @P_Key = (SELECT Id FROM EstimateMemo WHERE EstimateReferenceId = @EstimateReferenceId AND EstimateId = @EstimateId)
	END
    
	BEGIN
		DELETE MemoApprover WHERE EstimateMemoId = @P_Key
		INSERT INTO [dbo].[MemoApprover]
		(EstimateMemoId, User_Id,Priority,Status,Remarks,RolePriority_Id, Created_By,Created_Date,Updated_By,Updated_Date,Is_Deleted)
		
		SELECT @P_Key, UserId,PriorityId,StatusId,Remarks,RolePriorityId, Created_By,GETDATE(), Created_By,GETDATE(),0
		FROM @itemlist
	END

	SELECT
		@P_Key AS [Id]
END
GO
IF OBJECT_ID('[dbo].[sp_Memo_Attachments_DeleteById]')IS NOT NULL
BEGIN
DROP PROC [dbo].[sp_Memo_Attachments_DeleteById]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_Memo_Attachments_DeleteById]
    @id int =0
AS
BEGIN

    SET NOCOUNT ON;
    DELETE EstimateMemoAttachments WHERE ID = @id
	SELECT @id
END
GO